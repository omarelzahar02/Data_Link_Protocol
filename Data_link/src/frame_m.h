//
// Generated file, do not edit! Created by opp_msgtool 6.0 from frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame;
// cplusplus {{
#include <bitset>
typedef  std::bitset<8> bits;
// }}

/**
 * Class generated from <tt>frame.msg:25</tt> by opp_msgtool.
 * <pre>
 * packet Frame
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int Seq_Num;
 *     int M_Type;         // 0->data   1->Ack    2->Nack
 *     int ack;
 *     string M_Payload;
 *     bits mycheckbits;
 * }
 * </pre>
 *
 * Frame_Base is only useful if it gets subclassed, and Frame is derived from it.
 * The minimum code to be written for Frame is the following:
 *
 * <pre>
 * class Frame : public Frame_Base
 * {
 *   private:
 *     void copy(const Frame& other) { ... }

 *   public:
 *     Frame(const char *name=nullptr, short kind=0) : Frame_Base(name,kind) {}
 *     Frame(const Frame& other) : Frame_Base(other) {copy(other);}
 *     Frame& operator=(const Frame& other) {if (this==&other) return *this; Frame_Base::operator=(other); copy(other); return *this;}
 *     virtual Frame *dup() const override {return new Frame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Frame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Frame)
 * </pre>
 */
class Frame_Base : public ::omnetpp::cPacket
{
  protected:
    int Seq_Num = 0;
    int M_Type = 0;
    int ack = 0;
    omnetpp::opp_string M_Payload;
    bits mycheckbits;

  private:
    void copy(const Frame_Base& other);

  protected:
    bool operator==(const Frame_Base&) = delete;

    // make assignment operator protected to force the user override it
    Frame_Base& operator=(const Frame_Base& other);

  public:
    // make constructors protected to avoid instantiation
    Frame_Base(const char *name=nullptr, short kind=0);
    Frame_Base(const Frame_Base& other);
    virtual ~Frame_Base();
    virtual Frame_Base *dup() const override {return new Frame_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSeq_Num() const;
    virtual void setSeq_Num(int Seq_Num);

    virtual int getM_Type() const;
    virtual void setM_Type(int M_Type);

    virtual int getAck() const;
    virtual void setAck(int ack);

    virtual const char * getM_Payload() const;
    virtual void setM_Payload(const char * M_Payload);

    virtual const bits& getMycheckbits() const;
    virtual bits& getMycheckbitsForUpdate() { return const_cast<bits&>(const_cast<Frame_Base*>(this)->getMycheckbits());}
    virtual void setMycheckbits(const bits& mycheckbits);
};


namespace omnetpp {

inline any_ptr toAnyPtr(const bits *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline bits *fromAnyPtr(any_ptr ptr) { return ptr.get<bits>(); }
template<> inline Frame_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FRAME_M_H

